// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/dashboard.tmpl (24.34kB)
// tmpl/monitor.tmpl (1.478kB)
// tmpl/screenboard.tmpl (8.15kB)
// tmpl/timeboard.tmpl (2.2kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplDashboardTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9c\xdb\x72\xdc\xa8\xd6\xc7\xef\xf3\x14\xab\x7c\x3f\x79\x83\xef\x22\x8e\x33\x13\x57\xd9\x19\x27\xf1\xe4\xf0\xdd\xa8\x68\x89\x56\xb3\x2d\x89\xb6\x44\xb7\xbb\xed\xea\x77\xdf\x25\x40\x12\x47\x2d\xe4\x64\x2a\x95\xda\xf6\x45\xaa\x59\x0b\xfe\x20\x40\x9c\xf4\x23\x2d\xed\xf8\xae\xcd\x29\x9c\x15\x44\x90\x82\x97\x59\x41\xba\xcd\x8a\x93\xb6\x38\x83\xb3\xa2\xc8\x9e\x9e\xe0\xf5\x65\x01\xa7\xd3\x19\x3c\xbd\x02\x10\x4c\x54\x14\xd4\xdf\xff\xc1\x59\xef\xbd\x95\xa6\xd3\xe9\xec\x15\x40\x45\x8e\x7c\x27\x32\x71\xdc\xd2\xc1\x7d\x25\x4d\xb7\xbd\x45\xc5\x79\x7a\x02\xb6\x86\xd7\x17\xb4\xcb\x5b\xb6\x15\x8c\x37\xf0\xc7\xe9\xf4\x0a\xa0\x30\x2c\x3a\xb1\x19\x69\x48\xfd\x07\xd0\xa6\x2f\xd0\x24\x75\xd9\x7d\xa2\xa4\xf8\xbb\xa9\x8e\x5a\xa9\xa5\xa4\xc8\x78\x1f\xee\x4b\x29\x1f\x61\x8a\xa2\x53\xfa\x32\xff\xb4\x95\x4e\xbf\x6b\xab\xe9\xf9\x7a\x73\x3c\xef\x5b\x5a\x6f\x2b\x22\xe8\x17\xd2\x32\xb2\xaa\x68\xa7\x25\xfa\xb8\x0f\x4c\x6c\xe6\x63\xb4\xa4\x29\x29\xbc\xd6\x16\xa1\x63\x66\x7b\x1d\x55\x56\x39\x40\x43\x6a\x6a\x54\xf8\x87\x3e\xa8\x4a\x34\x16\xe3\xa6\xa5\x6b\x76\xd0\x3a\x00\x5b\x15\x1c\x52\x68\xef\x94\xc6\x78\x0e\xa3\x41\xd6\x64\x57\x89\x51\xa3\xd0\xe1\xb1\x29\x54\x30\x28\x12\xa8\xd2\x78\x40\xe6\xf6\x81\x0b\xb6\x3e\x5e\xb1\x6e\xc8\xb0\x91\x86\xac\xea\x2d\x43\xab\x19\x91\xa2\x42\x6e\xf5\xde\xb4\xb4\xa3\x02\x6f\x06\x3f\x1e\xd2\x18\xd9\x56\xa7\xb0\x1b\x25\xda\x2c\x73\xd9\x7e\x21\xd5\x8e\x8e\x35\xfd\xf4\xe4\xe4\x1d\xef\x0a\xf3\x9d\x01\x60\x2f\x85\x47\xaf\xca\x67\x70\x9f\xc2\xad\xff\xdc\x76\x1c\x6a\xf6\x2b\x2b\xca\xb9\x9a\x7c\x90\x7e\xfd\x00\xba\xd5\xd4\xa8\x60\xd6\x80\xd2\x72\xec\x6a\x3c\x19\x9f\xfd\x30\x8e\x3c\xfd\xc3\x7d\x1b\x1e\x01\xe0\x68\x39\xbe\x4f\x8e\x07\x56\x88\xcd\xe8\xf8\x2a\x43\xa3\x73\x43\x59\xb9\x11\x83\xf3\xbd\x0a\x69\x2f\x5e\x57\x46\xa9\x2f\xe8\x9a\x35\xcc\x18\xca\xa4\xef\xb5\x1e\xf4\xb2\x62\x72\x0f\x4f\xa2\xab\xe1\x4d\x45\x5b\x71\x59\x8c\xa9\x00\x48\x6f\xc9\x58\xa1\x0b\x35\x44\x18\xfd\x4e\x11\x46\xa5\x2f\xec\x51\x66\x37\x29\xed\xd9\xe3\x30\x10\xcb\xae\xa0\x23\xa0\x4a\x6a\x3c\x9f\x74\xd4\x90\xaf\x44\x86\xb1\x3e\x45\xe2\x33\x7b\xf4\x64\xb2\xae\x37\x1a\x5a\x32\x52\x9a\xde\x9b\x8a\x95\x8d\x27\x48\xa4\xd5\x50\x54\xd1\x50\xc9\x9b\x96\xe6\xac\x33\x5b\x4c\x8e\x9a\xda\xa6\xf4\xa6\x38\xa8\xdc\x3f\x0d\x13\x86\xd2\xae\x0f\x2a\x11\xe9\xc1\x9f\x90\x1e\x84\xf7\x80\xf4\x20\xec\xe7\x1b\x23\xa1\x7a\x9f\xe8\xfd\x8e\x76\x66\x91\xc6\xce\xea\xbb\x5a\x6d\x19\x3a\xe7\xa8\xf2\xd1\x88\x04\x70\x6f\xb8\x9d\x5c\xa7\x0e\xbd\xad\x3f\xee\x68\x7b\xb4\x12\x92\x6d\x9d\xdd\xf7\xd6\x29\x03\x00\xd6\x14\xf4\x60\x84\x73\x5e\x6f\x77\x82\x82\x19\x07\x80\x94\x65\x4b\x4b\xd2\xbf\x3b\x96\x7d\x4d\x72\x2a\x2c\x0b\x6b\x04\x6d\xf7\xa4\x32\x8c\x27\xe3\x77\x47\x49\x9b\x6f\x1c\x75\x59\xa8\x48\x82\xb2\xe5\xbb\x6d\xb6\x3a\x3a\x49\xfc\x8c\x2b\x56\x33\xdb\xd2\xf1\x56\x38\xc9\xe2\x4f\x02\xc0\xdb\x82\xb6\x8e\xcd\xcf\xe6\x14\x2c\xe7\x29\xa1\x4d\xae\x78\xe9\xb7\x49\xc5\xcb\x97\x36\xf9\x75\x6d\x72\xd3\xf2\x9c\x76\x9d\xdf\x2e\x5b\xe5\x50\x6d\x63\x15\xb8\xa6\xa2\x65\xb9\x57\x7d\xd9\xca\xac\xad\x35\xab\x04\x6d\x6d\x9b\x5d\x19\x29\xa5\x7b\xcb\x9b\x42\xce\x57\xa4\xfa\x93\xb7\x35\x19\x27\x77\xf5\x97\x4f\xee\x6c\xad\xfd\x4f\x4e\xb7\x21\x2d\x11\xdc\xac\x41\xb9\x32\x31\xc2\x5b\x52\x51\x21\x4c\x4b\xbe\xeb\x04\xaf\xb3\x55\x99\xe5\xbc\xb2\xd2\x6a\xcf\xda\xf7\xb0\x9a\x94\x34\xdb\xb5\xd5\xa2\xe7\x7b\xa3\xdb\x9d\xb7\xf6\x38\x35\x9a\x53\x34\x2a\x46\xec\x6a\x21\xbd\x25\xe5\x7d\xec\xdb\xc3\x7e\x19\xad\x16\x8a\xa7\xfc\xbb\xef\x95\x56\x4a\xbb\x9f\xc6\x53\x7e\xb3\x52\x1d\xac\xe6\xba\x37\x7e\x07\xaa\x20\xa5\x42\xbf\x5b\xf2\xc7\x9f\x2d\xff\x81\x8a\x07\xde\xde\xf9\x6f\x4b\xa3\x1c\x2f\x23\xd9\xaf\x1b\xc9\x3e\xed\x02\x33\x7e\xbb\x7b\x99\xf1\x7f\x61\x9b\x5c\xb0\x6e\x5b\x91\xa3\xb3\x21\x00\x28\x94\x5d\x6e\x0b\x12\x64\x3e\x8b\x63\x65\x0b\x74\xd2\xf2\xe4\x0f\xe3\xd9\xba\x62\x5b\x7b\x1e\xaa\xb2\x9a\x35\x9e\x89\x1c\x66\xe7\x80\x8a\x35\xd4\x2e\x9e\xb6\xc9\x8d\xdc\xa2\x4a\xb8\xa6\x82\x14\x44\x10\xeb\x01\xea\xc1\x68\x3e\x03\x3d\xf4\x5b\xfb\xce\x6e\x27\x39\x9a\x67\xfd\x6e\x7b\xd9\xd4\xb9\xe9\xf7\xbe\x5e\xcd\xe7\xd2\x9c\x5a\xf1\x6f\xe5\x04\x4a\x6f\xb9\x33\xed\x4a\x6b\x26\x78\x82\xc4\x65\x93\xb7\x94\x74\xf4\x2f\xce\x0b\x4b\x85\x69\x47\x56\x72\x5e\xa4\xce\x39\xe7\x47\x7f\xd6\x31\x17\x19\x48\xf2\x0b\x16\x98\xb5\xb2\x82\xa5\xcc\x5c\x9f\x37\xfc\x41\x1e\x9a\x34\xf6\x9c\xd9\x6d\xf8\x83\x3a\x92\x69\x52\xa6\xce\x3f\x59\x55\x59\xe9\xfb\xee\x18\x99\xa7\x52\xda\xd9\xd9\xdd\x02\xc8\x9d\xed\x62\xbd\x99\x7d\x5c\x78\x63\xf7\x76\x43\xf3\x3b\x23\xe3\x5c\x86\xd5\xfe\x50\xf9\x50\x89\xbf\xfa\x71\x8e\x35\xa5\xa1\x52\x0e\x26\x25\x34\xc6\x48\xd3\x72\x85\x4c\x95\x44\x09\xab\x83\x8d\x03\xb1\xa1\x73\x7e\x4c\xd8\x44\x93\xd2\x5c\x91\x89\x3e\xa8\x77\xce\xfd\x4f\x34\x7d\xdf\xd5\xae\x68\xd9\xbb\x26\x15\xd9\xcf\x2a\x65\x55\x62\x46\x34\x54\x52\xc5\x73\x3a\x8b\x52\x33\xcf\x42\x8c\x68\xa8\xa4\x3b\xdb\xaa\x9d\x82\xd2\x51\x3e\x54\xe2\xdd\x9e\x36\xc2\x29\x14\xed\x6d\x66\x99\xa6\x48\x49\x15\xff\xee\x40\xf3\x9d\xb0\x0f\x54\xfa\x16\xc8\xe8\xe8\x98\xda\x62\x8a\x9c\x74\x32\xe2\x1c\x8a\x18\xc7\x21\x09\x2f\x4c\xbf\x63\x30\x5f\x18\x19\xd6\x2f\x8c\xfc\x8d\x4a\xfc\xc9\xbd\xda\x5a\x73\xbb\xb2\xc6\x28\xa8\xd8\x77\x72\x60\x5d\xe8\x5c\xc6\x75\x1c\x65\xd8\x3b\x93\xb9\x22\x2b\x6a\x8f\x64\x95\xb4\xe8\x8e\x24\x7f\x9f\x92\x46\xb0\x9c\xb8\xb3\xbb\xb4\xe8\x4e\x2e\x7f\x27\x09\x5d\xb3\xc6\x9e\x63\xd9\xd0\xd4\xbd\x27\x4d\x82\x1c\x6c\x09\x72\x18\x24\xc8\x21\x4d\xe2\xb2\xc9\xab\x5d\x41\xff\x9f\xb6\xdc\x9d\xef\x7a\x7b\xf6\xd8\x3b\xf4\xc7\x20\x23\xea\x9c\xf6\xe2\xc1\x59\xbe\x32\xa1\xb6\x75\x1d\xf2\x65\x0b\x9c\xb7\x79\x0b\xe9\xfb\xf0\x8b\x3d\x57\x11\xb1\x97\x71\xd9\xeb\xf8\x33\xaa\xe3\x03\x2f\xdc\x95\x50\xc3\x0b\x6a\x9e\x4a\x8f\x51\x12\xc4\xae\xe5\x01\xc8\x7b\xde\x59\xc7\x11\x0d\xcf\xd4\xc9\x48\xb6\x91\x9e\x41\xd7\x8c\x9d\x20\x2e\x27\x99\x80\xb6\x9a\x8b\x6c\x69\x23\x2e\x3e\xa7\xe4\xdc\xaa\x80\x4e\x86\x87\x77\x8c\xa7\x3c\xf9\x67\xf6\x68\xcf\xd6\x9d\x32\x68\x11\x15\x40\x55\xae\x49\x5b\x5a\x2f\x6a\xad\x0c\xc3\x6b\x26\x03\xf8\x7c\xc6\xcb\x8e\x9a\x3d\xb9\x52\x06\x3d\xfa\xa8\x40\xca\x98\xbc\xab\x9b\xce\x1e\x95\xa5\x65\x1c\x97\x65\x28\x69\xc6\xbe\x20\x82\xaa\x04\xee\xac\x5d\x10\x41\x33\xa5\x6c\x4c\xdd\x46\xfc\x24\xfd\x6b\xda\x75\xa4\x8c\x64\x51\x2b\xa7\x9f\x8b\x9d\x0a\x6f\x1d\x15\x5d\x6f\xdc\xcc\x56\xd2\x19\xe8\xad\xdb\xd0\x5c\x76\x74\xfc\x39\xfa\xfd\xa9\x51\xf4\x3e\xa8\xcb\xda\xff\xc4\xd3\xef\xea\x9a\xb4\xee\x86\xb2\x53\x56\xf3\x7d\x36\x23\xa2\xaa\xba\xf8\xea\x88\xd1\xd0\x1d\xb6\xa9\xea\x6c\x51\x2b\xdb\x91\xd3\xa6\xfd\x9b\x96\xae\x69\x4b\x9b\x9c\xba\x0b\x80\x7e\xe7\x30\xb8\x8c\xb5\x80\x91\x00\xcd\xe1\x3d\x53\x53\xc8\x5b\xbe\x6b\xac\x51\x63\xc3\xf4\x74\x93\xe5\xca\xa5\xbf\x2f\xda\xf1\xd3\x56\xa3\xa4\x13\xb7\x2d\x2b\x4b\xda\x52\x7f\x51\x4a\x3a\x91\x89\xd1\x6b\x2c\x4e\xad\x54\x09\x55\xd5\x08\x7b\x7a\xca\xb5\x65\xa8\x19\x15\x42\x85\xce\x49\x7e\xd7\x8f\x97\x4d\xe1\x2e\xba\x56\xa3\x27\x33\xd7\x5f\x6e\x82\xa4\x3a\xb9\x65\xd6\x06\x48\x56\x85\x60\xe3\x26\x68\x8c\x82\xaf\x2c\x59\x7e\x77\xc3\xad\x1d\x03\xcb\xef\xb2\x2d\x1f\x77\x0d\x3a\x42\x92\xd2\xbb\xa2\xa4\xae\x14\xed\x6d\x93\x96\x8c\x82\x8a\xbd\xd9\x09\xde\x39\x6b\x33\x32\xda\xf4\x67\xe1\x31\x8c\xb7\xae\x3c\x3b\x77\xbe\x4f\xea\x03\x75\xe3\x33\xa5\x11\x0d\x95\xfc\x16\x5b\xc2\xba\x8e\xc3\xcb\x12\xf6\x77\x5b\xc2\xca\x17\xf1\xfc\x28\x97\x38\x9d\x37\x6a\xae\x8e\x6a\x41\xd4\x99\x83\xe6\x18\x1b\xdf\x48\xc9\xaf\x53\xa6\xec\x5a\x5b\xf4\x2e\x4a\x87\xf0\x71\x80\xb6\x7b\x66\x8d\xea\x9d\xb6\xe8\xa6\xd7\x21\x54\xe8\x0b\xa3\x0f\x1e\x37\x41\x1f\x6c\x70\x42\x47\x49\x2d\xd5\x15\xdd\xd3\xea\xef\xd5\x7f\x68\x2e\xd8\x9e\x5e\x5e\x98\xa5\xac\xf8\xc4\x76\xc4\xa2\x27\x8d\x82\xef\xda\x96\xb7\xe7\x3b\x49\xd6\x38\x83\x21\xed\x5d\xd9\x4a\xf9\xa6\x41\xd1\x4c\x91\x54\x2f\xd7\xbc\xf0\xea\xa5\xee\x6d\x53\xbd\xc8\x28\x09\xc3\x63\x4d\xbf\xb2\xa6\xe0\x0f\xf6\x60\x5b\xd3\xec\x41\x9b\x87\x41\x72\x8a\x98\xb2\xa0\xbd\xb3\xbe\x86\x8d\xc3\x90\xe7\xa9\x95\xc1\x1b\x88\x52\xce\xc9\xed\xe5\x87\xdd\x11\xe6\x5e\x66\x1b\xf1\x82\x91\xcd\xd2\x95\xa7\xc1\xac\x04\xa1\x1f\x1d\x2d\x17\x0f\x01\xef\x9a\xbd\xb9\x55\x6d\xf6\xc3\x81\x50\xb3\x4f\xe8\x9b\x5b\xd2\x48\x26\xcd\xe8\x94\x5b\xd2\xc8\x83\xf4\xa1\x33\x0e\x51\x92\x3a\xfa\x7b\x66\x2d\xae\x64\x0f\xdf\xb0\x71\x55\x35\x46\x49\x7f\x6b\x3c\x39\xaa\xac\xce\xab\x92\xbc\x44\x13\xb4\xc9\x8f\xfe\xe2\x4c\x99\xcd\x55\x99\xb2\x24\xa9\x9e\xb7\x94\xdc\x15\xfc\xc1\xdb\x70\xac\x46\xc7\xa4\x3c\x45\x4e\xdb\x30\xb1\x4e\xb4\x6c\xe5\x9e\x0f\xa8\x2d\x93\xe9\x33\xf6\x4c\xa6\x39\x29\x93\x4f\x1a\x2c\x36\x08\xcf\x31\x93\x01\x3a\x56\xb0\xe7\x94\x8b\x95\x06\xcf\x85\x3d\x52\x6f\xeb\xd0\xb1\x47\x6a\xef\x1b\x8c\x68\xa8\xa4\x4d\x32\x82\x39\xa6\x0c\x2e\xd3\x33\x60\x8e\xa3\xcd\x22\x1d\xad\x57\xd8\xa2\x1a\x2d\xe1\x80\xcf\xa1\x1e\x61\x8e\x7c\x84\x39\xfa\x11\x30\x02\x12\x10\x0a\x12\xf0\xaf\x21\xa1\x61\x2b\x4a\x45\x6a\xff\x1c\x19\x69\x54\x9b\x4f\x47\x42\x02\x21\x19\x29\x96\x31\xb5\x3d\x0a\x77\xc0\xc7\x69\x49\x4c\xd5\xa5\x26\x61\x9e\x9c\x4c\x92\xf3\xbe\x31\xa5\x51\x94\x49\xda\x2e\x6c\x08\xc9\x44\x25\x2e\x5f\x7b\x85\x19\x60\x68\xcf\xd5\x2f\x02\x9c\x0f\xe7\x23\x25\xb3\xa7\xfd\x4c\x61\xc7\x07\xa8\xd8\x9e\x66\xfd\x94\x32\x4c\x80\x91\x78\x4f\x4f\x7e\x09\x9d\x42\x85\x9e\x20\xf6\x54\x21\x5e\x14\xd2\x98\x51\xac\xc2\x9c\xbd\x19\xcc\xf1\xa3\x68\xe5\x07\x38\x52\x48\x64\x49\x31\x6d\x1f\x1c\x05\xb3\x71\xc3\x6e\x9f\x2d\x35\x14\x3f\x3a\x91\x6d\x58\x28\x52\x9a\x69\x78\x08\xb1\xa6\x10\xe3\x4d\x21\x40\xa0\x40\x94\x42\x81\x59\x7e\x23\x44\x6b\x40\x98\x48\x01\xa7\xdb\x41\x8c\x4c\x81\x00\x9d\x12\x4a\x1c\xa1\x54\xe2\x85\xf2\x69\x15\x88\x11\x2b\x80\x3c\x75\x98\x5c\x89\x67\xed\x96\xdd\x0e\xbb\x8d\x3a\xd7\xd6\x41\x86\x15\x62\x1c\x2b\xbc\xb4\xb5\x55\x86\xdf\xab\xad\xa3\x6c\x2c\xcc\xf2\xb1\x10\x62\x64\x21\xc2\xc9\x42\x84\x95\x85\x60\x25\x2e\x29\x3d\xc2\xce\x42\x02\x3f\x0b\x31\x86\x16\x02\x1c\x2d\x04\x39\x2a\x98\xe5\x69\x61\x96\xa9\x85\x20\x57\xbb\xb4\x1e\x22\x8c\x2d\x84\x29\xd0\x04\x3d\x8f\xb7\x05\x8f\xb9\xc5\x55\x7c\xf6\x16\x82\x2d\x3e\xaf\xe2\x73\xb8\x10\x7c\x5f\xe6\x55\xbe\x79\x0a\x07\xaf\x1b\xdc\x3b\xe1\x48\xd5\x2d\x69\x98\xef\x5e\xb6\xfe\x7b\xf4\x2f\x64\x1b\x65\x78\x61\x8e\xe3\x85\x97\x91\xdc\x2a\xc3\xef\x35\x92\x07\xd9\x60\x88\xf1\xc1\xf0\xd2\xd6\x56\x19\x7e\xaf\xb6\x8e\x9d\xa5\x42\x8c\x3b\xc6\x25\x7d\xfe\x18\x82\x0c\x32\xc4\x39\x64\x08\xb3\xc8\x10\xe6\x91\x21\x3a\x97\x86\xb8\x64\x08\xb3\xc9\xb0\xb0\xe2\x82\x9c\x32\xc4\x58\x65\x88\xf1\xca\x10\x66\x96\x97\x96\x26\xc2\x2f\x43\x84\x61\x4e\x10\x0c\xb2\xcc\x10\xe6\x99\x71\xb9\x28\xd7\x0c\x51\xb6\x19\x17\x0d\x31\xce\x10\xe2\x9c\x13\xa5\x5c\xde\x19\x82\xcc\x33\x2e\x16\x63\x9f\x21\xc6\x3f\xe3\x92\x1e\x07\x0d\x21\x16\x1a\xbc\x35\xc0\x92\x3e\x14\x38\xb7\x0a\xf0\xd1\xcf\xca\x23\xe1\xac\x22\x7e\x80\xe1\xb2\xd3\x30\xcf\x4f\x63\x72\x01\x8e\x1a\x52\x58\xea\x24\xdd\x90\x68\x98\xab\x4e\x92\xf3\x3a\x37\xc6\x58\x63\xaa\x0e\x6b\x0d\x73\xbc\x35\xa6\x15\xe4\xae\x21\x99\xbd\xc6\xe4\x83\x0c\x36\x24\x73\xd8\x98\x7c\x68\x85\x33\xc3\x64\x63\x72\x21\x36\x1b\x12\xf9\xec\x94\x46\x0b\xa3\xa1\x4b\xe1\x50\xfc\x14\x32\x70\x00\x19\xe4\xb6\x31\x2d\x17\x25\x82\x79\x86\x1b\x93\x0b\xb0\xdc\x90\xc4\x73\x63\xc2\x2e\xbe\x0d\xe6\xd9\x68\xc8\xe9\xf2\xdd\x60\x7e\x2f\x72\x3f\xf9\x02\xf6\xd9\x37\x5a\xbc\xe9\x2d\xf3\x60\x19\xc0\x80\x19\x5c\xd4\x05\x67\x60\x0e\x9e\x49\x90\x73\x20\x1a\x98\x03\x69\x70\xb9\x18\x50\x03\x8b\xa0\x9a\x68\x3e\x3f\x34\x19\xb9\x48\x38\x98\xfd\x25\xe4\x74\x99\x71\x98\x1f\x82\x66\xd8\x71\xbc\xe2\xe6\x06\x8a\xe5\x43\xc5\xbf\x51\x7d\x01\xb6\x1c\x92\xf8\x72\x5c\x38\xcc\x99\xc3\x52\xd6\x1c\xcf\x28\xc8\x9c\xc3\x32\xee\x1c\xcb\xc5\xe5\xcf\x61\x9e\x41\x47\xe5\x5c\x16\x1d\x30\x1e\x1d\x53\xf4\xb8\x74\xc0\xd8\x74\x4c\xd1\x63\xd4\x01\xe3\xd4\x31\x45\x9f\x57\x07\x9c\x59\x47\xab\x32\xc6\xae\xc3\x72\x7e\x3d\x25\xaf\x18\xc7\x0e\xcf\x65\xd9\xd1\x96\x8d\x31\xed\xb0\x98\x6b\x47\x9f\xcf\xe6\xdb\x61\x8e\x71\x47\xb5\x82\xac\x3b\x2c\xe0\xdd\xb1\x1c\x62\xdc\x3b\x2c\x64\xdf\xb1\x7c\xe2\x0c\x3c\x3c\x83\x83\xc7\x72\x8b\xf2\xf0\xb0\x9c\x89\x47\xdb\x68\x86\x8d\x87\xe7\xf2\xf1\x78\x75\xba\x9c\x3c\xe0\xac\x3c\x26\x1a\x67\xe6\xe1\x19\xdc\x7c\x4a\xbd\x39\xfc\x3c\x24\x31\xf4\x98\xb0\xcf\xd2\x43\x02\x4f\x9f\xa2\xea\x70\xf5\x90\xc4\xd6\x63\xc2\x21\xc6\x1e\xd2\x38\x7b\xb4\x97\x84\x78\x7b\x48\x66\xee\x31\x79\x17\xb1\x07\x73\xd9\x18\x72\xba\x0c\x3e\xbc\x6c\x33\xfe\x97\xb6\x19\x31\x9e\x1f\x96\x32\xfd\x58\x46\x3e\xdb\x0f\x38\xdf\x8f\x89\xfa\x9c\x3f\xe0\xac\x3f\x26\x1a\x60\xfe\x21\x89\xfb\x4f\x2c\xed\x0c\xff\x0f\x8b\xef\x00\xa0\x79\x46\xef\x02\xc0\x73\xee\x03\xa4\xd4\x9d\x73\x2f\x00\x92\xee\x06\x60\xc2\xe1\x3b\x02\xb0\xe0\x9e\x00\x96\x83\x77\x2b\x00\xcc\xa1\x33\xe8\xf5\xee\x0d\x80\xb7\x88\x43\xbf\x77\xcd\xdf\x1f\x88\x16\x7a\xaa\x71\xef\x1e\x01\x60\x77\x09\x70\xd1\x9f\x39\xf2\xff\xd0\xf0\x64\xdf\x35\x80\xf8\x7d\x03\x4c\x28\x70\xef\x00\x92\xee\x1e\xa0\xc2\xfe\x1d\x04\x48\xba\x87\x90\x22\xec\xdd\x47\x80\xe4\x3b\x09\x29\xf2\xfe\xdd\x04\x58\x70\x3f\x21\x25\x87\xd0\x3d\x05\x58\x78\x57\x21\x25\x9f\xc8\x9d\x05\x78\xd6\xbd\x85\x94\x0c\x23\xf7\x17\xe0\x79\x77\x18\xd0\x1c\x43\x77\x19\x20\xf9\x3e\x43\x44\x7e\xfa\xf5\x43\x97\x82\xc2\x77\x25\x6c\x96\x3b\x82\x78\x3b\x78\xf7\x0c\xda\x9d\x82\x75\xbb\x78\xb6\x91\xb9\x5b\x42\x23\xac\xfe\xb5\x1e\xe3\x34\xf3\x3f\x5b\x9f\x5e\xfd\x37\x00\x00\xff\xff\x37\xa6\x7e\xd1\x14\x5f\x00\x00")

func tmplDashboardTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplDashboardTmpl,
		"tmpl/dashboard.tmpl",
	)
}

func tmplDashboardTmpl() (*asset, error) {
	bytes, err := tmplDashboardTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/dashboard.tmpl", size: 24340, mode: os.FileMode(0644), modTime: time.Unix(1596529667, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb5, 0x6, 0x3b, 0xba, 0xbf, 0x88, 0x6f, 0xf2, 0xf4, 0xe1, 0x95, 0xd, 0xcd, 0xf6, 0x34, 0x2b, 0x30, 0xf, 0x8a, 0x4e, 0x34, 0x42, 0xa, 0x57, 0xac, 0xeb, 0xa5, 0x13, 0xee, 0xcb, 0x51, 0xff}}
	return a, nil
}

var _tmplMonitorTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x94\xcf\x6e\xe3\x20\x10\xc6\xef\x7e\x8a\x91\xcf\xab\x3c\x41\x7b\x58\xb5\x59\x35\x87\x4d\xb4\x55\xa4\x1e\x56\x2b\x84\xec\x49\x8c\x4a\x20\xc5\x38\x56\xc4\xf2\xee\x15\x0c\x8e\xff\x94\xa6\x27\xf3\x7d\xdf\xfc\x18\x8f\xa7\x31\xd8\xea\xce\x54\x08\x65\xcd\x2d\xaf\xf5\x91\x9d\xb4\x12\x56\x9b\x12\x4a\xe7\x60\xb5\xa9\xc1\xfb\x12\x5c\x01\xa0\xf8\x09\x61\xfe\xf7\x48\xa1\x6d\x70\xbc\x2f\x0b\x00\x7b\x3d\x7f\x13\xda\x07\x87\x42\xce\x81\x38\xc0\x6a\xcf\x8f\x2d\x78\x1f\xaa\xc2\xd3\xb2\xea\xaf\x73\x86\xab\x23\x52\xd0\xfb\xd2\xb9\x95\xf7\xe5\x0f\xe7\x50\xd5\xde\xff\x23\x10\xaa\x9a\x18\x27\x6c\x5b\x7e\xc4\x39\xe3\xe1\x61\xbd\xdb\x17\xe1\xfa\xdf\xc9\xf6\xbe\x08\x12\x00\xb6\x15\x97\xdc\x0a\xad\xd8\x50\x3a\xcd\xef\xce\xc1\x6a\x57\xeb\x5b\x6c\x41\x28\x00\x3e\x3a\x34\x57\x78\x0c\x6d\xac\xfe\xc4\xe7\xff\x11\x7b\xc6\xa7\x86\x1b\x5e\x59\x34\xf1\x05\xa9\xd3\x5e\xd8\xe6\xc6\xa5\x9e\xd3\x20\xb6\xda\x8a\xc3\x75\xab\x9f\xb9\xe5\x64\xa8\xa8\x30\xa5\x59\xf8\x2c\xf4\x2e\x71\xd2\x5f\x92\xd3\x11\x24\xdc\x2b\x52\xf9\x46\x59\x34\x17\x2e\xc9\x34\x49\x65\x62\x90\x09\x99\x4f\x67\xb0\x74\xf7\xcf\xae\x16\x76\xd6\x24\x8f\xca\xb4\xbf\x49\x26\xc3\xd9\x8b\x13\xea\xce\xbe\xa4\x4f\x4f\x27\xd6\x24\xc2\xdc\xcd\x94\x6f\x54\x25\xbb\x1a\xc7\xe5\x11\x24\xb0\xb8\x44\x04\x99\x66\xee\x8c\xe9\xa3\x13\x06\x7f\x75\x52\xbe\x09\x55\xeb\x7e\x98\x53\x94\xd9\xa1\x93\x92\xf5\x64\x0c\x93\xca\x16\xe4\x46\x85\xfd\x8b\x6e\xed\x33\x4a\x7e\x4d\xb3\xc2\x9e\x35\xba\xb5\xac\x8e\x5a\x9a\xd6\x97\x58\x86\xb5\xbe\x70\xd9\xc5\x05\x9c\xe4\xf0\x26\xce\x80\xd9\xec\xc8\x9c\x7c\x83\xc6\x60\xdb\x68\x59\x8f\x8b\x48\xeb\xb9\x34\xec\x78\x0e\xbf\x01\x37\xc0\xee\x9d\x7c\x00\xfd\x9e\x2e\x1f\xa5\xe9\x5b\xdc\x2a\xde\xb8\x51\x42\x1d\x07\xb5\x4f\x47\xaa\x5d\x98\xf7\x00\xaf\x58\xe9\x4b\xf8\x5f\x9b\x83\x98\x19\xf4\x19\x71\x99\xce\x92\x9f\x8c\xb0\xa2\x1a\x56\x1f\xa0\x1a\xce\x84\x5a\xda\x77\x19\xcb\x0b\x07\xd6\xb2\xbf\xef\xf2\x53\x78\x66\x23\x32\xcf\x85\x2f\x3e\x03\x00\x00\xff\xff\x0c\x4b\xca\x70\xc6\x05\x00\x00")

func tmplMonitorTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplMonitorTmpl,
		"tmpl/monitor.tmpl",
	)
}

func tmplMonitorTmpl() (*asset, error) {
	bytes, err := tmplMonitorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/monitor.tmpl", size: 1478, mode: os.FileMode(0644), modTime: time.Unix(1596033556, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0x42, 0x83, 0x61, 0x15, 0x76, 0x9f, 0x6a, 0x4f, 0xe9, 0xe7, 0xd7, 0xd4, 0xf3, 0x4f, 0xae, 0x64, 0xfc, 0x6a, 0xe7, 0x1a, 0xad, 0x99, 0xf2, 0x68, 0x11, 0x15, 0xbd, 0x66, 0xfb, 0x52, 0x2f}}
	return a, nil
}

var _tmplScreenboardTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\xdb\x6e\xdb\xb8\x16\x7d\xcf\x57\x10\x7e\x3e\x48\xbf\xa0\x0f\x69\xd2\x4b\x80\xe4\x34\x27\x4e\xd3\x33\x33\x18\x08\x8c\xb4\x2d\x13\x91\x44\x97\xa4\x9c\x38\x1e\xfd\xfb\x80\xf7\x4d\x59\xb7\x16\x33\x7e\xb1\xb8\xd6\xde\x8b\xb7\xcd\xbb\x00\xc9\x5b\x91\x03\x59\x15\x54\xd1\x82\x97\x99\xcc\x05\x40\xf3\xc4\xa9\x28\x56\x64\x75\x3c\x92\xf3\xeb\x82\x74\xdd\x8a\x1c\xcf\x08\x51\x4c\x55\x40\xde\x5b\xfc\xc1\x24\xba\x6e\x75\x46\xc8\xf1\x48\xd8\x86\x9c\xdf\x03\x2d\xbe\x36\xd5\x81\x74\xdd\x19\x21\x02\x68\x91\x71\x9d\x7c\xaf\x0d\x7a\xec\xf1\x48\xa0\x29\xc2\xb7\x76\x5f\x6f\xa9\x00\x07\x49\xfb\x6d\x3d\x31\x31\xe0\xf7\x00\xf5\xae\xa2\x0a\x1e\xa9\x60\xf4\xa9\x02\x19\xd8\x17\xa6\xb6\x53\xbc\xa0\x4d\x09\xe4\xdc\xa6\x95\x33\xcb\xf6\xce\xce\xd4\x99\x90\x86\xd6\xa0\xff\x5d\xbd\xff\xab\x93\xb6\xda\x84\xec\x04\x6c\xd8\x6b\xe0\xee\x6c\xd2\xb3\x05\x6c\x68\x5b\x29\xcf\x5e\xb9\xa4\x6e\xce\x33\x42\x06\x6a\x33\xf0\x8d\x2b\xf2\x9d\x15\x25\xa8\x91\xe2\xbf\x18\xd2\x95\x59\x1d\x76\xb1\xa3\xf4\xb7\x2f\xd2\xab\x47\xff\x1f\xa0\x83\x87\x7e\x0b\x90\x6f\x58\xd7\xc5\x56\xf2\xa4\xf3\x1f\xe0\x55\x61\x97\x50\xfa\x54\xe0\xa2\x62\x65\x93\xa8\x64\xd4\x40\x58\xcb\x1b\xcd\x89\xad\xd9\x5b\x5a\xa2\x4c\x6a\x04\x4b\x39\x93\x09\xa5\x2f\xc0\xca\xad\xf2\xe0\xd6\xa6\x9c\x44\xe0\x26\xfc\xbf\xb3\x42\x6d\x3d\xf6\x62\x12\xce\xdb\x33\x53\xd5\xb0\xad\x66\x6b\xa0\xbf\x7d\xd9\x67\x5b\xf3\x92\x57\x5c\x78\x2c\x37\x09\xe7\xeb\x99\xc9\xd6\xab\x01\x41\x6e\x64\x20\x50\xe9\x6f\x1b\x3d\x84\x54\x6c\x0f\x99\xdc\xd1\xd0\x49\x37\x6c\x0f\x6b\x9d\xf6\x99\x74\xc3\x59\x0d\x65\x5c\xc1\x15\x6c\x06\xf2\x4e\x70\xc5\x2a\xc8\x0a\xd8\x84\x22\x38\xf7\x47\xf6\xe6\x4d\x08\xd9\xb3\x37\x5f\x20\x8b\xaf\xa2\x31\xca\x39\xb6\x58\x2b\x15\xaf\xbf\x35\x4c\x45\x2a\x37\x58\xd6\x6a\xd0\x37\x1f\x36\x9b\x91\xbc\x68\x15\x97\x39\x8d\xe3\x82\x10\x1a\x20\xa7\x87\x6d\x66\xe4\x74\xaf\x27\x03\xc4\x06\x45\x6f\x84\x20\xa3\x19\xbd\x7b\xf8\xd1\x82\xf4\x73\x44\xd2\xe0\x83\x54\x32\x85\xe8\x9f\xb0\x56\xa1\x1b\x82\xf2\xff\x5a\x10\x87\x68\x47\xc8\x0f\x5f\x3c\xcf\xac\xb0\x4b\x52\xb8\x58\x5d\x3b\x17\x05\x78\x74\x9e\x9a\x54\x31\x19\xf6\xa5\x7e\x68\x30\xc3\x82\xd8\x6c\x81\xea\x2d\x28\xc1\x72\x4c\xd4\x16\x71\x72\x81\x5f\x52\x4f\x78\x55\x9f\x58\xa5\x40\x24\xb5\xd5\x3d\xbb\xb1\x30\xea\xda\x60\xb8\x40\xf8\x86\xd5\x38\x98\xf5\x48\xad\x63\x20\x7b\x76\x81\xd0\x45\x59\x0a\x28\xa9\xe2\x49\x09\x69\x44\x7d\x2c\x63\xbb\x05\xba\x97\xbc\xde\x51\x01\x0f\x1c\x73\xb9\x05\x33\xc5\xe3\x8c\x15\xcd\x96\xa8\x6e\x75\x9c\xf6\xbb\x3c\x37\x68\xd2\xe7\x89\xe1\x02\xe1\xaf\xa2\x00\xf1\x21\x89\x6b\xae\xa1\xec\x29\x2c\x8b\xd1\x64\xa9\xde\x15\x13\xa7\x82\x05\x13\x89\xa2\x35\x5a\x20\xf9\xf1\x55\x09\x7a\xc9\x2b\x4c\x81\xc6\xb2\x9c\x57\x5e\x12\x19\x2d\x90\xbc\x6e\x72\x01\x54\xc2\x67\xce\x13\x9a\x39\x3c\x2b\x35\xe1\xa4\x7b\xc6\x8b\x62\xa0\x29\x98\x62\xbc\xa1\xd5\x27\x2e\x6a\x8a\xe7\x1c\x34\x21\xcd\x9a\x9d\x4c\x4e\x3a\x92\x82\x4f\xb6\x31\x4e\x68\xa6\x1a\x5e\x29\xbd\xe3\xe8\x7a\x39\x56\x9b\x20\x77\x47\x2b\x50\x0a\x52\x6e\xe7\x40\xbf\xf5\x0b\x36\x0b\x45\xed\x08\xe8\x0f\x40\x3f\x56\xf0\x10\x4c\x2c\x17\xaa\x5f\x37\x7b\x10\x2a\xa5\x98\xc5\x42\xb7\x3a\x8b\x85\x8a\x8f\xb4\x6a\x7b\x4d\xb0\x37\x90\x5f\x90\x1d\xbf\xb4\x80\x35\x2d\xe1\xdb\xfd\x4d\xaf\x88\x1a\xcd\x5a\x11\xe2\x1a\x99\x4d\x0b\x77\xa7\x61\x49\xa6\x23\x75\x38\x76\xd7\xea\x50\xc1\x60\xb8\x9e\x30\xd2\x00\x03\xe1\xf7\xaf\xc4\x4b\x7f\xf2\x9b\x59\x3c\x27\xb5\x92\x0d\xac\xfd\x4d\x6c\x63\x47\x9b\x9c\xbc\x7b\x67\xda\xe0\x57\xda\xf9\x81\x96\x76\xdd\x4b\x06\xbd\xa2\xa5\x5b\x20\x25\x79\x4f\xfe\x38\x1e\xdd\x14\x10\xad\xbb\x6e\x75\x3c\x9e\x77\xdd\xea\x3f\xc7\x23\x34\x45\xd7\xfd\x39\x9a\x97\x2e\x9f\xdb\xce\x8c\x6f\x9a\xe6\xd2\x66\x06\xde\x43\x33\xb8\xa5\x1a\x20\x4e\xe6\x2c\xd0\x36\x28\x4a\x46\xb7\x4d\xba\xb8\xc6\xf8\xa7\x0b\x9b\x96\xf6\x96\x8a\xe7\xa4\x59\x43\x71\x87\x98\x93\xf2\xd6\xc6\xe8\x74\xff\xf7\xcf\x6c\xdd\x6e\xe8\x13\x24\x2b\x59\x65\x00\xbf\x7f\x71\xec\x02\xa1\x93\xe9\x68\x66\x32\x1a\x0a\x8e\x5f\x6b\x6d\xef\xed\x4f\x2c\x67\xa7\xf4\xe8\xc1\x2f\x39\xbe\xea\xdd\x60\x72\x7a\x8d\x06\x13\x07\x39\x7c\x9a\xc1\x87\x98\xe4\xf8\x32\xe8\x79\x27\x20\x67\x92\xf1\x70\xd6\xd8\x05\x20\xde\x5f\x04\x8b\x99\x23\x6c\x7a\xaa\x5f\x70\x64\x19\x54\xfa\xc4\x9b\xa4\x4d\x36\xbc\x49\xdb\x04\x19\x4c\xc8\x5c\x54\x20\xd4\xf5\x95\x47\xa9\x4e\x66\x2c\xec\x60\x22\x3d\xa5\xd1\x2a\x7e\x0f\x1b\x01\x32\xcc\x8c\xfa\x60\x97\x09\x87\xa1\xb3\x5d\x34\x9b\xd0\xbb\x81\x12\x81\x95\x4d\xf9\x38\xf7\xdc\xac\x3f\x6e\x1c\xab\x91\x34\x4f\x62\x34\x21\x96\x1c\xde\xcc\x49\x69\x78\x16\x1a\x8e\xb8\xb8\x4a\xa3\x95\x19\x2f\xca\xc3\xd7\x15\x5b\xc8\x9f\xc3\x75\x85\x49\x84\x4d\xba\x65\x26\x9c\x3f\x0b\xde\xee\x58\x53\x7a\xb8\xf4\x69\x27\x81\xf8\x39\x95\x44\x22\xf1\x9f\xbb\x31\xc9\x9f\xef\xb8\x8c\x17\x14\xf9\x73\xb6\xe3\x32\xde\x35\x79\x7a\x46\xe3\x63\x51\x42\x22\x02\x1a\x40\x2a\xce\x60\xea\xc2\xea\xe1\x36\x74\xc1\x56\xd5\xa1\x0f\x1c\x3e\x53\x00\x9c\x39\xce\x77\xda\xf3\x43\x99\xe3\x5d\xf4\x53\x99\xec\xa0\x23\x3b\x21\x61\x96\x47\x1c\xc1\x66\xc2\x4d\x02\x18\x9b\x4c\x28\xad\xd9\x1b\x0a\x06\x69\x53\x4e\x22\x70\x13\xfe\xb7\x54\x94\x2c\x4c\x57\xb5\x4d\xf9\x73\xbd\xe7\xa6\x6a\xd2\xec\x43\x1d\x9a\x7d\x28\xbc\x41\xa7\x8a\x0d\x62\xcf\x72\x70\x7f\xa1\xf8\x36\x99\xb9\xff\x50\x8f\xbe\xf1\xbc\xb0\xbb\x8b\x4e\x54\xcd\x75\x75\x2a\x99\x5c\x59\x8f\xb5\x2f\x3c\x82\xc0\x8b\x83\xee\xa5\x6c\xef\xb0\xd8\xd4\xc8\x6c\x6a\xf2\xa2\x07\xde\xaa\x9e\x62\x65\xc0\xbe\x66\xdf\x74\xaa\x17\x5b\xa9\xd6\x5b\xfe\xf2\x85\xc5\x4d\x57\xdd\x4a\x95\xc9\x2d\x7f\xc9\xb6\x1a\xf5\x7d\x9a\x5a\x2e\xd0\xfc\x28\x04\x17\x03\xaa\x60\xf1\x9e\x6e\xb0\x5e\xa0\x7c\x43\x15\x34\xf9\xe1\x54\xba\x72\x44\x4f\x3b\xda\x2f\x10\xff\x20\x80\x3e\x17\xfc\xa5\x39\x95\x7f\x0a\x54\x2f\x03\xec\xb3\x20\x8b\x2b\x26\x95\x60\x4f\xad\x42\x5d\x19\x73\x29\x30\xdb\xcb\xa8\xe7\xb9\x20\xaf\x7b\xf7\x20\x75\xc3\xa4\x3a\xcd\xcb\x3f\x57\x65\x95\xa6\x7b\x99\xf5\x5c\x27\x32\xbb\x62\x72\x57\xd1\x83\xbd\x73\xf0\x5c\x61\x41\x7f\xa9\xe0\x9f\x6c\x7a\xa6\x73\xb7\xf3\x77\x02\x36\x20\xa0\x89\x83\xdd\x4c\x93\xd9\x2e\xe2\xf8\x0a\x22\x31\x9f\x9a\xff\x59\x01\xbf\x83\xe0\x97\xbc\x45\xe7\x8d\x2d\x2b\x20\x7b\x03\xc1\xb3\xdc\xe2\x7e\x55\xe8\x5b\x4f\x4e\x8c\x0d\x2d\x61\xad\xa8\x6a\xa5\x6e\xc5\xe4\xc9\xa7\x36\x64\x26\x0d\x6b\xbb\x20\x79\x05\x1a\x73\x5e\x98\x1f\x7e\x44\x1a\xc8\xcf\x3e\xef\xe0\x27\x92\x31\xe7\x9f\xc9\x0f\x2f\x47\x43\xf9\xe1\xc5\x69\xcc\xf9\x67\xf2\x4b\xf6\xc9\x43\x19\x26\xdb\xe6\x51\xf7\xa9\x6d\x3d\x15\xb4\x96\x08\xb4\x87\xbd\x14\xde\xd9\x54\xef\x71\x65\xcd\xf1\x1d\x91\xe4\xf1\x76\xc8\x31\x0b\x5e\x2f\x22\x38\xfa\x9a\x35\xea\x6f\x22\x34\xa2\x26\x8c\xe3\x00\xb1\xdc\x8c\xc4\x5a\xd1\xa4\x0e\x26\xe9\x2b\xe1\xb8\x61\x89\x91\xa3\xda\xe0\xc8\x6e\xeb\x46\xa2\x11\x6d\x92\xf6\x6d\xda\x93\x7f\x11\x90\x39\xdd\xc1\xe5\x96\x0a\x9a\xe3\x7b\x8d\xe1\x05\x92\x97\x12\x42\xb9\x2b\x9b\xf2\x2b\xa2\xe7\x4e\x3b\x5d\x9f\x3b\xed\x43\xef\xe8\x83\x71\x77\xf6\x77\x00\x00\x00\xff\xff\x3f\x88\x81\x6c\xd6\x1f\x00\x00")

func tmplScreenboardTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplScreenboardTmpl,
		"tmpl/screenboard.tmpl",
	)
}

func tmplScreenboardTmpl() (*asset, error) {
	bytes, err := tmplScreenboardTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/screenboard.tmpl", size: 8150, mode: os.FileMode(0644), modTime: time.Unix(1596033586, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x86, 0xbf, 0x52, 0x91, 0x9c, 0x80, 0x6, 0x9f, 0x5d, 0xe4, 0xed, 0xaf, 0xe4, 0x1d, 0xdb, 0xb9, 0x88, 0x3b, 0x55, 0x64, 0x6a, 0x6b, 0x18, 0xad, 0x7, 0x6e, 0x66, 0x31, 0xc, 0xfd, 0xac, 0x73}}
	return a, nil
}

var _tmplTimeboardTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xcd\x6a\xe4\x38\x10\xbe\xf7\x53\x14\x26\x87\x5d\x08\xfd\x00\x0b\x39\xec\x26\x74\x58\x98\x9f\x4c\x12\x32\x87\x61\x30\x6a\xbb\xec\x88\x91\x2d\x47\x96\x93\x74\x84\xde\x7d\xd0\xbf\xec\x76\x4f\x18\xa6\x2f\x56\x55\x7d\x55\xfa\xea\xcf\x6d\x81\x23\x9f\x44\x85\x50\xd4\x44\x92\x9a\xb7\xa5\xa4\x1d\xee\x39\x11\x75\x01\x85\x52\xb0\xfd\xbf\x06\xad\x0b\x50\x1b\x00\x49\x25\x43\x70\xbf\x0b\x67\xbd\xb7\x2a\xad\x8b\x0d\x40\x8d\x63\x25\xe8\x20\x29\xef\x83\xf9\x2a\x53\x39\x90\x40\x52\x97\xbc\x67\x07\x1b\xc3\x60\x6e\x91\xd4\x9f\x8d\x42\xeb\x0d\x80\x52\x2f\x54\x3e\xc2\xf6\x5a\x90\xe1\x71\x0c\x3a\x41\xfa\x16\x61\xeb\xc4\xd6\x98\x2c\xa1\x40\x69\x85\x4c\x8a\x74\x85\x0d\xed\xa9\xa7\x60\x2d\xcf\xf4\x2d\x65\xf0\x40\xdf\x32\x17\xa0\x0d\x6c\xff\x9d\x24\x1f\x2b\x62\x63\x91\x78\xf6\xf8\xdc\x68\x14\xd8\xd7\x3e\xac\xf7\xbe\x11\x58\xd1\xd1\x5d\x37\xc4\xb3\xf7\xce\x8d\xab\xde\xd7\x82\x4f\x83\xc9\xbb\x35\x07\xb8\x80\x6f\x4a\x9d\xb5\x4e\xf9\xcf\x45\xb0\x6b\x1d\x6a\x72\x46\xfb\x1a\x5f\xcf\xe1\x0c\x19\x76\x0b\x04\x6d\xbc\x59\xeb\x73\xa5\xec\x55\x85\x52\x16\x69\x4f\x56\xf3\x7d\x8d\xc5\x5d\xc5\x07\x34\x2c\x46\x73\xf0\x2c\x46\xa7\x34\x77\x38\xfb\xaf\x58\x24\xc4\x1f\xb0\x90\x07\x5b\x66\xab\x1b\xad\xe0\xba\x0e\x30\x10\x86\x52\xe2\x6c\x16\x2d\x7c\x7b\xe3\x2d\xa1\xa7\x11\x5b\x36\x8c\x0e\xab\xd8\x9d\x31\x04\xbc\x5e\x63\xf2\x91\x88\x1f\x28\x4c\x41\x94\x02\x37\x56\xb9\xca\x8f\xa7\xf7\xe9\xac\x25\x52\x95\x87\x01\xd3\xbe\x18\x21\x51\x7b\x26\x6c\x8a\x93\xf5\x60\x85\x64\xf4\x77\x7f\x20\x7b\x64\xa0\x35\xb3\x4f\x8f\x0d\xca\xf9\x0c\x45\xee\xcb\x67\xc8\xc5\x51\xbf\xc5\xa7\x09\x47\xb9\xc6\x5d\x38\x53\x24\xff\x94\xd5\xf7\xcb\x84\xe2\x70\xcc\xcf\xa7\x64\xd3\x5c\x64\xe9\xae\x0f\x1d\x4c\xfb\xd5\xb6\x02\x5b\x22\xb9\x70\x05\xa5\x0d\xf4\x08\x45\x01\x7f\x5d\xe1\x2d\x36\x77\x52\xd0\xbe\xcd\x61\x7f\x9b\x45\x4c\x4e\x61\x13\xf3\x30\xc5\x3c\xe5\xa3\x3b\xc3\x2c\xc5\x22\xcc\x86\x6b\x39\x5e\xc6\xcd\xee\x72\x1c\xa6\x30\x70\x61\x8f\xd3\x94\xcd\x6a\x9c\x5c\xbf\xd2\x5a\x3e\x82\xd6\x2f\xf6\xe9\xdd\x82\xf2\x94\xd3\xbb\xb5\x8c\x1e\x59\x7a\x2e\xdd\x85\xdd\xa7\x7d\xc9\xfb\xda\xbe\xfb\x08\xdb\x71\xd1\x11\x39\x9b\xe1\x53\xd6\xd9\xeb\xd6\xfc\xaa\x04\x2c\x1b\x8b\x9c\x95\x0a\x7e\xaf\x56\x90\xe5\x5d\xf1\x6e\x20\x22\x6f\xeb\x65\xd2\xa4\x59\x8b\xb7\x84\x25\x59\xdf\x9c\xe3\xf8\xa1\x0e\xd3\x28\x79\xf7\x5f\x7b\xc9\x99\x8d\x5b\x59\xb9\xdc\xb7\x65\x65\x35\xe1\xee\x05\xec\xbd\x80\xbb\x65\xc0\x66\x35\xe0\xee\x74\xc0\x13\x7d\x84\xe5\x20\xc7\x15\x9e\xed\xf3\xaa\xa0\xfd\x3b\x35\x53\xc5\x8e\xdf\x63\x37\x30\x22\xf1\x81\x08\x4a\xf6\x0c\x8f\x1b\x6e\xfe\xe7\x3d\xa8\x7c\xf6\x28\xdf\xec\x9e\x74\x98\xbd\x0f\x3e\x19\x31\xb4\x68\x10\xd8\xd0\x57\xc8\xfe\xe7\x8c\x18\xac\x35\x36\x64\x62\x32\x7d\x16\x38\xd1\x7c\x58\xac\x11\xd6\x9b\x9f\x01\x00\x00\xff\xff\x5d\x01\x77\x3d\x98\x08\x00\x00")

func tmplTimeboardTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplTimeboardTmpl,
		"tmpl/timeboard.tmpl",
	)
}

func tmplTimeboardTmpl() (*asset, error) {
	bytes, err := tmplTimeboardTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/timeboard.tmpl", size: 2200, mode: os.FileMode(0644), modTime: time.Unix(1596033586, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4, 0x76, 0xfe, 0xb7, 0xfe, 0xd8, 0xd, 0x69, 0x90, 0x8d, 0xa8, 0x3f, 0xf4, 0x8b, 0x71, 0xcf, 0xf5, 0xf7, 0xec, 0xfc, 0x7e, 0xe5, 0xb8, 0x3b, 0x74, 0xfe, 0x24, 0xd4, 0xdb, 0xa9, 0x5c, 0x5d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/dashboard.tmpl":   tmplDashboardTmpl,
	"tmpl/monitor.tmpl":     tmplMonitorTmpl,
	"tmpl/screenboard.tmpl": tmplScreenboardTmpl,
	"tmpl/timeboard.tmpl":   tmplTimeboardTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"dashboard.tmpl":   &bintree{tmplDashboardTmpl, map[string]*bintree{}},
		"monitor.tmpl":     &bintree{tmplMonitorTmpl, map[string]*bintree{}},
		"screenboard.tmpl": &bintree{tmplScreenboardTmpl, map[string]*bintree{}},
		"timeboard.tmpl":   &bintree{tmplTimeboardTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
