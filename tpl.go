// Code generated by go-bindata.
// sources:
// tmpl/monitor.tmpl
// tmpl/screenboard.tmpl
// tmpl/timeboard.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplMonitorTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xcd\x6e\xdb\x3a\x10\x85\xf7\x7a\x8a\x81\xd6\xf7\xfa\x09\x92\x45\x91\xb8\x88\x17\xb5\xd1\xc0\x40\x16\x45\x41\x10\xd2\xd8\x22\x42\x93\x0e\x45\x59\x30\x58\xbe\x7b\xc1\x3f\x4b\x54\xe8\xd4\x2b\xf1\x9c\x33\x9f\x46\xa3\x91\x15\xf6\x72\x50\x0d\x42\xdd\x52\x4d\x5b\x79\x24\x27\x29\x98\x96\xaa\x86\xda\x18\x58\x6d\x5a\xb0\xb6\x06\x53\x01\x08\x7a\x42\xc8\x7f\x8f\x21\xb4\x75\x8e\xb5\x75\x05\xa0\xaf\xe7\x3b\xa1\xbd\x73\x42\xc8\x98\xff\x81\x1d\x60\xb5\xa7\xc7\x1e\xac\x75\x65\xee\x6a\x59\xf6\xcb\x18\x45\xc5\x11\x43\xd0\xda\xda\x98\x95\xb5\xf5\x7f\xc6\xa0\x68\xad\xfd\x1d\x49\x28\xda\x00\x39\x61\xdf\xd3\x23\xe6\x90\x87\x87\xf5\x6e\x5f\xb9\x06\x7e\x44\xdb\xda\xca\x49\x00\xd8\x37\x94\x53\xcd\xa4\x20\xa9\x74\x9e\xdf\x9d\x9d\xd5\xaf\xd6\xb7\xd8\x82\x50\x01\x7c\x0c\xa8\xae\xf0\x08\x2e\xff\xd3\x5f\xff\xf1\xd8\x33\x3e\x75\x54\xd1\x46\xa3\xf2\x4f\x18\x5b\x1d\x99\xee\x6e\xe0\xd0\x74\x9a\xc5\x56\x6a\x76\xb8\x6e\xe5\x33\xd5\x34\x38\xc2\x2b\x44\x48\xe2\x5e\x4d\x78\x1a\x3f\xed\x4f\xc9\x6c\x0a\x09\xf8\x8a\x01\xb0\x11\x1a\xd5\x85\xf2\xe0\xaa\xa8\x12\x96\xe4\x00\x2d\xa7\x8b\xe0\x70\xff\x6f\x43\xcb\x74\xd6\x28\xf5\xca\xbc\xc7\x59\xa6\x48\xda\xb3\x13\xca\x41\xbf\xc4\x1d\x08\x27\xd2\x45\x46\xee\x16\x01\x1b\xd1\xf0\xa1\xc5\x69\x8f\x58\x10\x88\xdf\xa7\x80\x99\x67\xbe\x1c\xd7\xc7\xc0\x14\x7e\x1f\x38\x7f\x63\xa2\x95\x63\x9a\x97\x97\xc9\x61\xe0\x9c\x8c\xc1\x48\x13\x2b\x16\x94\x47\x86\xe3\x8b\xec\xf5\x33\x72\x7a\x8d\x33\xc3\x91\x74\xb2\xd7\xa4\xf5\x5a\x9c\xda\xa7\x58\x91\xb6\xbe\x50\x3e\xf8\x85\x9c\x25\xf1\x26\x66\xc8\x62\x76\x46\x9d\xbf\x8d\x4e\x61\xdf\x49\xde\xce\x36\x33\x2c\xec\xd2\xd1\xd3\xd9\xfd\x31\x4c\x88\xdd\x7b\x08\x00\xc8\xf7\xd8\xc0\x24\x65\xcf\x32\xd5\xbc\x51\x25\x98\x38\x26\x79\x8c\xc7\x50\xbd\x30\xbf\x46\xbc\x62\x23\x2f\xee\x1b\xcc\x51\x44\x25\x3d\x63\x2e\xd3\x77\xd8\x4f\x8a\x69\xd6\xa4\x0f\x02\xa0\x49\xe7\x00\x5b\xda\xff\xa0\x2c\x6f\x9a\x68\xcb\x1e\xef\xe5\x33\x7c\x71\x41\x4a\x87\xca\x56\x7f\x03\x00\x00\xff\xff\x9e\x63\xc6\x89\xe8\x05\x00\x00")

func tmplMonitorTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplMonitorTmpl,
		"tmpl/monitor.tmpl",
	)
}

func tmplMonitorTmpl() (*asset, error) {
	bytes, err := tmplMonitorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/monitor.tmpl", size: 1512, mode: os.FileMode(420), modTime: time.Unix(1596609878, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplScreenboardTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\x59\x6f\xdb\x3a\x1a\x7d\xcf\xaf\x20\xfc\x3c\x4d\x7f\x41\x1f\xd2\x2c\x6d\x80\x64\x9a\x89\xd3\x74\x16\x0c\x04\x46\xfa\x2c\x13\x91\x44\x97\xa4\x1c\x3b\xbe\xfe\xef\x17\xdc\x49\x59\xa2\x18\xe0\xde\xbc\x58\x3c\xe7\xf0\x70\xdf\xc3\x80\xd3\x9e\x95\x80\x16\x15\x16\xb8\xa2\x75\xc1\x4b\x06\xd0\xbd\x50\xcc\xaa\x05\x5a\x1c\x0e\xe8\xfc\xb6\x42\xc7\xe3\x02\x1d\xce\x10\x12\x44\x34\x80\xbe\x68\xfc\x49\x05\x8e\xc7\xc5\x19\x42\x87\xc3\x27\x44\x56\xe8\xfc\x11\x70\xf5\xa3\x6b\xf6\xe8\x78\x3c\x43\x88\x01\xae\x0a\x2a\x83\x5f\x90\x8c\x11\xb3\x32\x0e\x74\x95\x0f\x48\x83\xe5\x1a\x33\x30\x18\xd7\xdf\x3a\x6e\x48\x8c\xc6\x7c\x82\x76\xd3\x60\x01\xcf\x98\x11\xfc\xd2\x00\xf7\xf4\x1b\x11\xeb\xa4\x80\xe1\xae\x06\x74\xae\x01\x61\x74\xc5\xd6\x08\x55\xd1\x11\xea\x70\x0b\xf2\xd7\x14\xff\x9f\x32\xa8\x4b\x8f\xd0\x86\xc1\x8a\xec\x1c\xf7\xa0\x83\x96\xad\x60\x85\xfb\x46\x58\xf6\xca\x04\x35\x3d\x5a\xa0\xb1\x40\x54\x98\x5f\xa4\xaa\x41\x4c\x15\xe1\x4d\xb1\x26\xdf\x62\xbf\xf1\x6d\x26\xbf\x6d\xb6\x76\x16\xfd\xb7\x83\xf6\x16\xfa\x8f\x83\x5c\xfd\x9a\xe6\xd6\x9e\x27\x1d\xe1\x09\x76\x22\x8a\xe3\x8a\x30\xb0\xb8\x68\x48\xdd\x45\x3e\x05\x56\x50\xe8\x66\x45\xf3\x76\x4b\xf2\x1e\xe7\xaa\xe0\x12\x09\xcd\x8c\x24\xe9\xf5\x1d\x48\xbd\x16\x16\x5d\xeb\x90\x31\x71\x5c\xd2\xe1\x17\xa9\xc4\xda\x82\x6f\x2a\x60\xe2\x5b\x26\x5d\x18\x5d\x7f\xba\x1c\xf2\xdb\x96\x20\xa3\x5e\x2f\x69\x43\x99\x05\x4b\x15\x30\xb1\x2d\x33\x53\x8f\x2d\x84\x98\x19\x2e\x01\x2a\xe4\xb7\xee\x4d\x08\x35\x64\x0b\x05\xdf\x60\xd7\x62\x77\x64\x0b\x4b\x19\xb6\xe9\x1c\xa7\x52\x1b\x4d\xbc\x81\x2b\x58\x8d\xa5\x1f\x11\x82\x34\x50\x54\xb0\x72\xd9\xb0\x06\xcf\xe4\xdd\x6a\x10\xda\x92\x77\x9b\x2b\x8d\x2f\x02\x75\x90\x7a\x50\x77\x3d\x17\xb4\xfd\xd9\x11\xe1\xb9\x52\x61\x45\x2f\x41\x5b\x91\xa1\x6c\xd6\xf4\xa2\x17\x94\x97\xd8\x8f\x17\x84\xb0\x83\x8c\x63\xa8\x99\x35\x94\xbd\x20\x1a\x38\xba\x93\x0c\x46\x4e\x20\x9a\x75\x5c\x8a\x7d\x98\x3d\x5f\xef\x03\x82\xab\xa0\xad\x74\x1f\xff\x01\x37\x20\x44\x20\x44\x68\x63\x20\x3b\x09\x3a\xc5\x22\x8a\x1d\x65\xe7\xc4\xf0\xa6\x21\x9b\x11\xd3\x62\x25\x71\xbd\x14\x4c\x28\x13\xde\x37\xa4\x69\xee\x49\x17\x52\x2b\xd2\x34\x45\x4b\x5c\xe5\x79\x49\x56\x6e\x95\x1c\xef\x4e\x1d\xf1\x2e\x72\xc4\xbb\xb4\xe3\x11\x7d\xfe\xac\xaa\x38\xd5\x5e\xa3\x0d\xf8\x08\xbf\x7b\xe0\x76\x09\x88\xdb\x70\x9c\x8b\x96\x08\xf9\xc7\xb4\x6c\xa4\x75\xff\xd5\x03\xdb\x87\x85\xfb\x6d\x4b\x65\x99\xac\x5a\x32\xcb\x8d\xc3\x27\x97\xa2\x19\x1f\x95\xe8\xd0\xec\xb7\x04\x8b\xd0\x32\x94\x65\xf9\xde\x83\x60\xa4\x0c\x99\x56\x23\xc6\xd0\xf1\x79\xa5\x85\x9d\xb8\x21\x8d\x00\x16\x95\x59\x8e\xd3\x95\x86\x83\x81\xea\x84\x59\xd6\x77\xa4\x0d\x27\x28\x39\x09\xb7\x7e\x72\xb2\x6c\x96\xd5\x45\x5d\x33\xa8\xb1\xa0\x51\x2e\xb1\x47\xed\xfc\x14\xea\xb2\x9c\x2f\x69\xbb\xc1\x0c\x9e\x68\x48\x96\x1a\x2c\x04\xf5\x6b\x92\x97\xe5\xf9\xae\x65\xc7\x1d\x36\x7f\xa9\xd0\xa8\xfd\x23\x61\x96\xf5\x0f\x56\x01\xfb\x1a\xf5\x74\x2a\xa1\xe2\xc5\xed\x84\xbc\x24\xdf\xf1\x8a\xb0\x53\xcb\x8a\xb0\xc8\x53\x8b\xb2\x4c\xaf\x77\x82\xe1\x4b\xda\x84\x1c\x48\xac\x28\x69\x63\x4d\x03\x51\x96\xe9\x6d\x57\x32\xc0\x1c\xbe\x51\x1a\xf1\xc4\xe0\x45\x2d\x09\x63\x3e\x10\x67\xf6\x87\xae\x22\x82\xd0\x0e\x37\x37\x94\xb5\x38\x9c\x8f\xc2\xd9\x6a\x44\xf7\x69\x20\x3c\x99\xba\x64\xc7\x72\xb1\x8a\x95\x8a\x16\xcc\x63\x13\x7b\x23\x1b\x73\x72\x87\x34\x59\xa6\xe4\xc2\x97\xb5\xf4\xcd\xd8\xea\x51\x31\x1c\x96\x76\xfc\x84\x03\x33\x52\x66\xfb\xdf\x76\x5b\x60\x22\xe6\x88\xc6\x5c\x13\x1b\x45\xb6\xe7\x33\x6e\xfa\x41\x45\x6c\x15\x64\xb7\x60\x86\xcf\xcf\x64\x8b\x6b\xf8\xf9\x78\x37\xc8\xa6\x44\x8b\x9e\xb9\x9e\x1e\xc8\x66\xac\x67\x77\x07\x79\xd0\xc8\x86\x29\xb1\x65\x3a\xdd\x34\xfd\xed\xbd\x67\x38\x39\xce\x2c\xb5\x33\x6e\xd1\x51\x46\xff\x25\x0e\x34\xd3\x95\x3f\xd8\xdb\x7c\xb4\xc6\x9f\x70\xad\x57\xc9\x68\xde\x10\xb8\x36\xcb\x29\x47\x5f\xd0\xff\x0e\x07\x33\x37\x78\xf5\xf1\xb8\x38\x1c\xce\x8f\xc7\xc5\x3f\x0e\x07\xe8\xaa\xe3\xf1\xff\xe9\xfd\x97\xd9\x06\x7d\x68\x07\x36\xba\x25\xbb\xde\x42\x17\x4d\x5e\xbe\x8b\x8c\x52\x27\xb3\x1a\x48\x55\xd0\x6f\x26\x77\x5d\x32\xdb\x4a\x3c\xc8\xd2\xa7\x93\x4c\x8e\x23\x83\x8c\xdf\x63\xf6\x1a\x55\xb3\xcf\xf8\x28\x75\x92\xf1\x56\xa9\x46\x36\x92\x7f\xd5\x0e\xf0\x0e\xbf\x40\xb4\xfc\x35\x0a\xb0\x1b\x20\xc3\x66\x59\x9d\xcc\x5a\x33\x73\xd6\x68\x9f\x19\xab\xfc\xec\x1e\x23\x0d\xec\x79\xf6\x6c\x84\x4f\x5c\x11\x44\xd7\x1d\x72\x67\x19\xdd\x76\x78\x41\xf2\xc0\x1f\x9e\x76\xc3\x43\x6e\x74\xbc\x9d\x88\xfb\xc0\xa0\x24\x9c\x50\x77\x98\xda\x38\xc0\x5f\x7e\x39\xc5\xec\x95\x47\x7c\x1b\x94\x71\xa4\x9d\xf0\xba\xa1\x5d\x54\x37\x2b\xda\xc5\x75\x13\x08\x92\x46\x17\x0d\x30\x71\x7b\x65\x61\x2c\x83\x05\x71\xfb\x20\x4f\xa7\x5d\x7a\x41\x1f\x61\xc5\x80\xbb\x79\x14\xf7\x82\x16\xcc\x60\xc1\x1d\x80\x97\x25\x1d\xef\xa0\x0e\xd0\x46\x87\x6c\xf7\xb7\x5c\x86\x43\x58\x49\xda\x25\xaa\xa6\x48\x94\xb4\x8b\x8e\x88\xea\x2c\x36\x3e\x59\x4d\xf5\x41\xbf\xca\x07\x2b\x7b\xb8\xa8\x4f\x44\xbc\x5c\x43\xf9\xea\x2e\xbb\x54\xc0\x6d\xff\x35\x93\x8c\xfe\x8d\xd1\x7e\x43\xba\xda\xe2\xb5\x0d\x1b\x93\x80\x9f\xf7\x89\x4c\x22\x87\xf9\x3b\xb7\xf2\xf5\x81\x72\x7f\xbb\x55\xbe\x16\x1b\xca\xfd\xbd\xa5\xa5\x67\x5d\xae\xab\x1a\x22\x1b\x90\x40\xe0\x63\x04\xe9\xeb\xcf\xa7\x7b\xd7\x1c\x6b\xd1\xba\xf6\x30\xf8\x6c\x26\xc2\x0c\x84\x69\xcf\xc5\xfd\x5a\x97\xe1\xfe\xfc\xa5\x8e\xf6\xe6\x9e\x4d\x9a\xa8\xb5\x35\xec\xd7\x6a\x72\x8e\xba\x75\x28\x49\x7a\x2d\xc9\x7b\xd0\x39\xb8\x0e\x19\x13\xc7\x25\x1d\xee\x31\xab\xfd\x55\x53\xab\x43\xf6\x3e\xc1\x72\xe9\xf2\x74\x5b\x57\x92\x6e\xeb\x8a\xa0\xd0\x74\xe6\x81\x6d\x49\x09\xe6\xc7\x15\x42\x07\x0b\xf3\xeb\x4a\x33\x14\xe7\x58\x9b\x47\x8f\xc8\x57\xbd\x8b\xc4\xa6\xd1\xdb\xc8\x74\x4d\xc3\x33\xb0\x70\x29\x91\x2d\x56\x6c\x0d\xe6\x2b\x3d\x90\xa5\x27\x38\xbc\xa7\xbd\x18\x78\x36\x0a\x1c\xba\x0e\xa5\xe9\x16\xed\xb9\x58\xae\xe9\xdb\x77\xe2\x4f\xb0\x6d\xcf\x45\xc1\xd7\xf4\xad\x58\x4b\xd4\xb6\x6f\xac\xcc\x72\xbd\x66\x8c\xb2\x11\x5f\xd0\xf8\xc0\xd9\xa9\xb3\xbc\xef\xb0\x80\xae\xdc\x9f\x9a\x37\x86\x18\xb8\x7b\x7d\x96\xfd\x57\x06\xf8\xb5\xa2\x6f\xdd\x69\x02\x2f\x8e\x1a\x24\x11\xc6\xc9\x4a\xe4\x8a\x70\xc1\xc8\x4b\x2f\x82\x46\xf5\xe9\x54\x21\x3b\x48\x6a\x10\x33\x2b\xb5\x47\xf3\x20\x7a\x47\xb8\x38\x4d\xcd\x3e\x97\x16\x8d\xa4\x07\xc9\x0d\xa2\x26\x93\xbb\x22\x7c\xd3\xe0\xbd\xbe\xee\xb0\x64\xa5\x41\x7b\x9b\x61\x5f\x0b\x07\xd2\xf9\x97\xa0\x07\x06\x2b\x60\xd0\xf9\x29\x40\x4d\xa3\xc5\xc6\xe3\xe1\xe5\x47\x24\x4f\xaf\x12\xa4\x82\xff\x02\xa3\x97\xb4\xef\xfc\x50\x58\x93\x0a\x8a\x77\x60\xb4\x28\x35\x6e\xd7\x8e\xa1\x7a\x66\xda\xec\x70\x0d\x4b\x81\x45\xcf\x65\x6d\x46\xcf\x8d\xad\x22\x0b\xae\x58\xdd\x14\xd1\x0b\xe4\x54\xe4\xec\x14\xc3\x27\xcc\x91\x14\xf5\xc3\x62\xf8\x2c\x37\x15\xf9\x63\x29\x86\x8b\xd6\x58\x8a\xe1\x12\x36\x15\xf9\x63\x29\x46\xfb\xed\xb1\x24\xa3\xed\xf7\x64\xf4\xf4\x11\x01\x33\xdc\xf2\x10\xd5\x47\xc9\x18\xdf\xe8\xd0\xf0\x39\x6f\x49\xc3\x5b\x2a\x4e\xfd\xfd\x94\x61\xb2\xde\xca\x3c\x3a\xf9\x96\x9a\x70\x50\x3d\xd6\xc3\xaa\x5b\xfb\x21\xa3\xb9\x8c\x07\x36\x1c\x95\x44\x05\x6d\x51\x0c\x37\x61\x32\x79\x0a\x1c\x1f\xf1\x7d\xdb\xf1\x60\xa4\xab\xa0\x7e\x29\xb3\xe4\x1f\x08\x78\x89\x37\x70\xb9\xc6\x0c\x97\xe1\x8d\xca\xd4\x52\x4a\x6b\x0e\x2e\xf7\x8d\x0e\xd9\xb5\xd3\x72\x23\x9d\x40\x9e\x6c\xf5\x3f\x1f\x24\xfe\x91\xe1\x78\xf6\x67\x00\x00\x00\xff\xff\x01\x2e\x34\x69\x77\x22\x00\x00")

func tmplScreenboardTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplScreenboardTmpl,
		"tmpl/screenboard.tmpl",
	)
}

func tmplScreenboardTmpl() (*asset, error) {
	bytes, err := tmplScreenboardTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/screenboard.tmpl", size: 8823, mode: os.FileMode(420), modTime: time.Unix(1596613454, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplTimeboardTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xcd\x6e\xdb\x38\x10\xbe\xfb\x29\x06\x42\x0e\xbb\x40\xec\x07\x58\x20\x87\x6c\x02\x07\x0b\x6c\xdb\x34\x09\xd2\x43\x51\x08\xb4\x34\x52\x88\x52\x3f\xa1\xa8\x24\x0e\xc1\x77\x2f\x38\xfc\x93\x6c\xc5\x3d\xd4\x27\xce\x37\xdf\xfc\x72\x86\x96\xc4\xa1\x1b\x65\x81\x90\x95\x4c\xb1\xb2\xab\x73\xc5\x1b\xdc\x75\x4c\x96\x19\x64\x5a\xc3\xe6\xbf\x12\x8c\xc9\x40\xaf\x00\x14\x57\x02\xc1\xfd\x2e\x9c\xf6\x81\x20\x63\xb2\x15\x40\x89\x43\x21\x79\xaf\x78\xd7\x06\xf5\xf5\x04\x72\x24\x89\xac\xcc\xbb\x56\xec\xc9\x87\xe5\xdc\x21\x2b\xbf\x58\x60\x6d\xcc\x0a\x40\xeb\x57\xae\x9e\x60\x73\x23\x59\xff\x34\x44\x50\xb2\xb6\x46\xd8\x00\x89\xb5\xd5\x51\x4a\x21\xa9\x85\x74\x92\xab\x6b\xac\x78\xcb\x29\x09\xe7\x0e\xe0\x85\xbf\xa7\x22\x1e\xf9\xbb\x55\x04\xa3\x35\xf0\x0a\x36\x97\xa3\xea\x86\x82\x09\xb4\x2a\x16\x05\x6f\x92\xb4\xc6\x64\xd6\x04\xdb\xd2\xbb\x0e\x0e\x6e\x25\x16\x7c\xf0\x41\xfb\x28\x78\x07\x49\xfb\xa1\x83\x1b\xd9\x8d\x3d\x75\xa0\xb6\x27\xb8\x80\xef\x5a\x9f\xd5\x0e\xfd\xe7\x22\x10\x8c\x09\xdd\x39\xe3\x6d\x89\x6f\xe7\x70\x86\x02\x9b\x03\x06\xaf\xbc\xda\x98\x73\xad\x29\x58\xa6\x35\x31\xe9\x44\xc8\x8f\xe5\x44\xee\x8b\xae\x47\x4a\x64\xb0\x27\x9f\xc8\xe0\x50\x1b\xc6\x11\x4e\x25\x92\x18\x7f\x94\x88\xda\xbb\xfb\x20\x74\x20\xc9\x4d\x01\x40\xcf\x04\x2a\x85\xb3\xe9\x24\xfe\xe6\xd6\x6b\xc2\x0d\x47\x6e\x5e\x09\xde\x2f\x72\xb7\x56\x11\xf8\x66\x39\x99\x4f\x4c\xfe\x44\x49\x6d\xb1\x90\x1b\xb5\x19\xe8\x67\xd6\xdb\x35\xa4\x8a\xf9\xaa\x7d\x8f\x69\x8d\xac\x90\xf2\x7b\x61\x62\x8c\xa3\xf6\x48\x42\x52\x6a\x4d\xe1\xff\x67\x3b\x14\x36\x8e\xa0\x83\x27\x3b\xf4\x68\xa4\x52\x09\xc7\x87\x58\x94\xab\xe0\x0e\x9f\x47\x1c\xd4\x62\x09\xd2\xe9\x62\x0d\xcf\x93\x5e\x7f\x1d\x51\xee\xd3\x1a\xc5\x3c\xa9\xb4\xb5\x31\x54\xef\x41\xb9\x5a\xdb\x14\xc0\x7b\x8f\x26\x97\x75\x2d\xb1\x66\xaa\x93\x2e\x09\x0b\xb6\x08\x59\x06\x7f\x5d\xe3\x1d\x56\xf7\x4a\xf2\xb6\x9e\xf2\xfe\xa6\x25\x4d\x66\x61\x4b\x13\x12\xa3\x91\x43\x1b\x75\x7d\x18\x36\x4e\x97\xd6\xbe\x17\x0e\x89\xbc\xf9\xc0\x59\x3b\xda\x73\x3f\x5e\x76\xcb\xfd\x31\xec\x78\x1a\xbc\x79\xb7\x93\xf1\x37\x5e\xaa\x27\x6b\xfa\x4a\x07\x6f\xe8\xd0\x13\x66\xa7\x9b\x3a\xb7\x99\x54\xe9\xcb\x0e\x8d\x88\x0a\x37\xd0\x57\x5d\x5b\xd2\x2b\xc9\xc4\xb6\x93\x0d\x53\x03\x4c\x47\xfb\x43\x75\x78\x9a\x53\x43\x8b\x44\xcd\x2b\xe2\xce\xba\x06\xd3\xb6\x9d\xee\xda\x7c\x3e\xac\xe7\xa6\x67\x72\x7a\xc7\x57\x09\x49\xb3\x97\x8a\x0a\xdb\xb3\xbc\x52\xc7\x01\x62\x33\xc6\x41\x75\xcd\xbf\xf5\x55\x27\xc8\x73\x41\x72\xbe\xab\xf3\x82\x90\x10\xfd\x80\xf6\x5b\x8f\xdb\x43\x8f\xd5\xa2\xc7\xed\xc7\x1e\xa7\xd7\xe6\x14\x4b\xa7\x55\xa2\x1e\x6f\xfa\xb2\x64\xfc\xe3\x3b\xc5\xd2\xf5\x3f\x60\xd3\x0b\xa6\xf0\x91\x49\xce\x76\x02\xe3\xc3\x37\xf9\x67\xb6\xdf\x08\x9e\x96\xbf\x78\x9e\xbf\xf9\x96\x35\x38\x79\x2d\x3e\x5b\x31\xdc\x57\x2f\xb1\xe2\x6f\x30\xf9\x6b\xb4\x62\xd0\x96\x58\xb1\x51\xa8\xf4\x49\xe1\x44\xfb\x51\xb2\x98\xb4\x59\xfd\x0a\x00\x00\xff\xff\xe4\xf8\xa0\x0f\xd5\x08\x00\x00")

func tmplTimeboardTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplTimeboardTmpl,
		"tmpl/timeboard.tmpl",
	)
}

func tmplTimeboardTmpl() (*asset, error) {
	bytes, err := tmplTimeboardTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/timeboard.tmpl", size: 2261, mode: os.FileMode(420), modTime: time.Unix(1596609878, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/monitor.tmpl": tmplMonitorTmpl,
	"tmpl/screenboard.tmpl": tmplScreenboardTmpl,
	"tmpl/timeboard.tmpl": tmplTimeboardTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"monitor.tmpl": &bintree{tmplMonitorTmpl, map[string]*bintree{}},
		"screenboard.tmpl": &bintree{tmplScreenboardTmpl, map[string]*bintree{}},
		"timeboard.tmpl": &bintree{tmplTimeboardTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

